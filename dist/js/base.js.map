{"version":3,"sources":["core.js","ui.js","http.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7KA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"base.js","sourcesContent":["function BaseJS(is_dev) {\n    if (is_dev === undefined) { is_dev = false; }\n    var base = this;\n    base.version = \"1.0.0\";\n    base.name = \"BaseJS\";\n    base.author = \"Jeeva\";\n\n    // private methods\n    var appendPrepend = function(e, t, n) {\n        if (\"string\" === typeof t) {\n            t = (new DOMParser).parseFromString(t, \"text/html\").getElementsByTagName(\"body\")[0].childNodes\n        } else t = [t];\n        for (var i = 0; i < t.length; i++) {\n            var s = t[i].cloneNode(!0);\n            n ? e.appendChild(s) : e.insertBefore(s, e.firstChild)\n        }\n    };\n\n    var addEvent = function(e, t, n) {\n        return e.addEventListener(t, n, !1), e.base_events || (e.base_events = []), e.base_events.push({\n            eType: t,\n            callBack: n\n        }), this;\n    };\n\n    this.fn = function (e) {\n        if (e instanceof HTMLElement) this.push(e);\n        else if (e instanceof HTMLCollection)\n            for (var t = 0; t < e.length; t++) this.push(e[t]);\n        else if (e === document) this.push(document);\n        else if (e === window) this.push(window);\n        else if (e instanceof Array)\n            for (t = 0; t < e.length; t++) this.push(e[t]);\n        else {\n            var n = document.querySelectorAll(e);\n            for (t = 0; t < n.length; t++) this.push(n[t])\n        }\n    };\n    this.fn.prototype = [];\n\n    this.fn.prototype.css = function (styles) {\n        base.in(styles).each(function (key, val) {\n            base.in(this).each(function (key2, val2) {\n                val2.style[key] = val;\n            });\n        });\n        return this;\n    };\n\n    this.fn.prototype.append = function (content) {\n        base.in(this).each(function (key, val) {\n            appendPrepend(val, content, true);\n        });\n        return this;\n    };\n\n    this.fn.prototype.prepend = function (content) {\n        base.in(this).each(function (key, val) {\n            appendPrepend(val, content);\n        });\n        return this;\n    };\n\n    this.fn.prototype.add = function (els) {\n        var currentObj = this;\n        base.in(els).each(function (key, val) {\n            currentObj.push(val);\n        });\n        return this;\n    };\n\n    this.fn.prototype.get = function (i) {\n        return base.select(this[i]);\n    };\n    \n    this.fn.prototype.addClass = function (cls) {\n        base.in(this).each(function (key, val) {\n            if (!val.classList.contains(cls)) {\n                val.classList.add(cls);\n            }\n        });\n        return this;\n    };\n\n    this.fn.prototype.removeClass = function (cls) {\n        base.in(this).each(function (key, val) {\n            if (val.classList.contains(cls)) {\n                val.classList.remove(cls);\n            }\n        });\n        return this;\n    };\n\n    this.fn.prototype.toggleClass = function (cls) {\n        base.in(this).each(function (key, val) {\n            if (val.classList.contains(cls)) {\n                val.classList.remove(cls);\n            } else {\n                val.classList.add(cls);\n            }\n        });\n        return this;\n    };\n\n    this.fn.prototype.html = function (s) {\n        if (s === undefined) {\n            return this[0].innerHTML;\n        }\n\n        base.in(this).each(function (i, el) {\n            el.innerHTML = s;\n        });\n        return this;\n    };\n\n    this.fn.prototype.attr = function (key, val) {\n        if (val === undefined) {\n            return this[0].getAttribute(key);\n        }\n\n        base.in(this).each(function (i, el) {\n            el.setAttribute(key, val);\n        });\n        return this;\n    };\n\n    this.fn.prototype.on = function () {\n        var _self = {};\n        var currentObj = this;\n        var args = arguments;\n        _self.call = function (callback) {\n            base.in(args).each(function (key, val) {\n                base.in(currentObj).each(function (i, el) {\n                    addEvent(el, val, callback);\n                });\n                return currentObj;\n            });\n        };\n\n        return _self;\n    };\n\n    this.fn.prototype.each = function (callback) {\n        base.in(this).each(function (key, val) {\n            callback(val);\n        });\n    };\n}\n\nBaseJS.prototype.in = function (iterable) {\n    var keys = Object.keys(iterable);\n    if (iterable instanceof Array) {\n        keys.pop();\n    }\n    var _self = {};\n    _self.first = iterable[0];\n    _self.last = iterable[iterable.length - 1];\n    _self.get = function(i) { return iterable[i]; };\n    _self.each = function (callback) {\n        var i;\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            if (iterable instanceof Array) {\n                key = parseInt(key);\n            }\n            callback(key, iterable[key]);\n        }\n    };\n    return _self;\n};\n\nBaseJS.prototype.select = function (sel) {\n    return new this.fn(sel);\n};","BaseJS.prototype.createUI = function (name) {\n    return this.select(document.createElement(name));\n};","BaseJS.prototype.http = { base: this };\nBaseJS.prototype.http.get = function (url) {\n    var _self = {};\n    var http = new XMLHttpRequest();\n    _self.ready = function (callback) {\n        http.onreadystatechange = function() {\n            callback(this)\n        };\n        return _self;\n    };\n    _self.headers = function(headers) {\n        base.in(headers).each(function (key, val) {\n            http.setRequestHeader(key, val);\n        });\n        return _self;\n    };\n    http.open(\"GET\", url, true);\n    http.send();\n    return _self;\n};"]}